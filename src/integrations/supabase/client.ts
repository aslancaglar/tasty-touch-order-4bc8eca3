
// This file is automatically generated. Do not edit it directly.
import { createClient } from '@supabase/supabase-js';
import type { Database } from './types';

const SUPABASE_URL = "https://yifimiqeybttmbhuplaq.supabase.co";
const SUPABASE_PUBLISHABLE_KEY = "eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJpc3MiOiJzdXBhYmFzZSIsInJlZiI6InlpZmltaXFleWJ0dG1iaHVwbGFxIiwicm9sZSI6ImFub24iLCJpYXQiOjE3NDQ0MDYwNjYsImV4cCI6MjA1OTk4MjA2Nn0.LoMhbECAQxEuf3o35XbFmps5v1-iZ4JieXstrsmylYU";

// Import the supabase client like this:
// import { supabase } from "@/integrations/supabase/client";

export const supabase = createClient<Database>(
  SUPABASE_URL, 
  SUPABASE_PUBLISHABLE_KEY,
  {
    auth: {
      persistSession: true,
      autoRefreshToken: true,
      storageKey: 'kiosk-admin-auth',
      flowType: 'implicit', // Add implicit flow for better token handling
    },
    global: {
      // Enhanced network resilience settings
      headers: { 'x-application-name': 'kiosk-admin' },
      fetch: (url, options = {}) => {
        // Create a new AbortController with a long timeout (45 seconds)
        const controller = new AbortController();
        const timeoutId = setTimeout(() => controller.abort(), 45000);
        
        return fetch(url, {
          ...options,
          signal: controller.signal,
        }).then(response => {
          clearTimeout(timeoutId);
          return response;
        }).catch(error => {
          clearTimeout(timeoutId);
          console.error("Supabase fetch error:", error);
          throw error;
        });
      },
    },
    db: {
      schema: 'public',
    },
    // Add retry mechanism for better resilience
    realtime: {
      params: {
        eventsPerSecond: 10,
      },
    },
    // Increased timeout for all requests
    auth: {
      persistSession: true,
      autoRefreshToken: true,
      storageKey: 'kiosk-admin-auth',
      flowType: 'implicit', // Add implicit flow for better token handling
      detectSessionInUrl: true, // Better handling of auth redirects
      // Two hour expiry window gives more time for token refresh
      localStorage: {
        getItem: key => {
          try {
            return localStorage.getItem(key);
          } catch (error) {
            console.error("Error reading from localStorage:", error);
            return null;
          }
        },
        setItem: (key, value) => {
          try {
            localStorage.setItem(key, value);
          } catch (error) {
            console.error("Error writing to localStorage:", error);
          }
        },
        removeItem: key => {
          try {
            localStorage.removeItem(key);
          } catch (error) {
            console.error("Error removing from localStorage:", error);
          }
        }
      }
    }
  }
);
